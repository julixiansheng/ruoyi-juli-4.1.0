package ${packageName}.service.impl;

import cn.hutool.core.util.ObjectUtil;
import cn.hutool.core.util.StrUtil;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.ruoyi.common.core.page.TableDataInfo;
import com.ruoyi.common.core.service.impl.BaseServiceImpl;
import com.ruoyi.common.utils.StringUtils;
import com.ruoyi.common.utils.sql.SqlUtil;

import java.util.Arrays;
import java.util.List;
#if($table.tree)
import java.util.ArrayList;
import com.ruoyi.common.core.domain.Ztree;
#end
#foreach ($column in $columns)
#if($column.javaField == 'createTime' || $column.javaField == 'updateTime')
import com.ruoyi.common.utils.DateUtils;
#break
#end
#end
import org.springframework.stereotype.Service;
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;

/**
 * ${functionName}Service业务层处理
 * 
 * @author ${author}
 * @date ${datetime}
 */
@Service
public class ${ClassName}ServiceImpl extends BaseServiceImpl<${ClassName}Mapper, ${ClassName}> implements I${ClassName}Service
{

    /**
     * 查询${functionName}
     * 
     * @param ${pkColumn.javaField} ${functionName}ID
     * @return ${functionName}
     */
    @Override
    public ${ClassName} get${ClassName}ById(${pkColumn.javaType} ${pkColumn.javaField})
    {
#if($table.tree)
#set($TreeCode=$treeCode.substring(0,1).toUpperCase() + ${treeCode.substring(1)})
#set($TreeName=$treeName.substring(0,1).toUpperCase() + ${treeName.substring(1)})
        ${ClassName} ${className} = baseMapper.selectById(${pkColumn.javaField});
        ${ClassName} parent${ClassName} = baseMapper.selectById(${className}.get${TreeCode}());
        ${className}.setParentName(parent${ClassName}.get${TreeName}());
        return ${className};
#end
#if($table.crud)
        return baseMapper.selectById(${pkColumn.javaField});
#end
    }

    /**
     * 查询${functionName}列表
     *
     * @param ${className} ${functionName}
     * @param page 分页
     * @return ${functionName}
     */
    @Override
    public TableDataInfo get${ClassName}List(${ClassName} ${className}, Page page)
    {
        IPage iPage = baseMapper.selectPage(page, getWrapper(${className}));
        return getDataTable(iPage);
    }

    /**
     * 查询${functionName}列表
     * 
     * @param ${className} ${functionName}
     * @return ${functionName}
     */
    @Override
    public List<${ClassName}> get${ClassName}List(${ClassName} ${className})
    {
        return baseMapper.selectList(getWrapper(${className}));
    }

    /**
     * 新增${functionName}
     * 
     * @param ${className} ${functionName}
     * @return 结果
     */
    @Override
    public int insert${ClassName}(${ClassName} ${className})
    {
        return baseMapper.insert(${className});
    }

    /**
     * 修改${functionName}
     * 
     * @param ${className} ${functionName}
     * @return 结果
     */
    @Override
    public int update${ClassName}(${ClassName} ${className})
    {
        return baseMapper.updateById(${className});
    }

    /**
     * 删除${functionName}对象
     * 
     * @param ids 需要删除的数据ID
     * @return 结果
     */
    @Override
    public int delete${ClassName}ByIds(String[] ids)
    {
        return baseMapper.deleteBatchIds(Arrays.asList(ids));
    }

#if($table.tree)

    /**
     * 查询${functionName}树列表
     * 
     * @return 所有${functionName}信息
     */
    @Override
    public List<Ztree> get${ClassName}Tree()
    {
        List<${ClassName}> ${className}List = baseMapper.selectList(new QueryWrapper<>());
        List<Ztree> ztrees = new ArrayList<Ztree>();
        for (${ClassName} ${className} : ${className}List)
        {
            Ztree ztree = new Ztree();
#set($TreeCode=$treeCode.substring(0,1).toUpperCase() + ${treeCode.substring(1)})
#set($TreeParentCode=$treeParentCode.substring(0,1).toUpperCase() + ${treeParentCode.substring(1)})
#set($TreeName=$treeName.substring(0,1).toUpperCase() + ${treeName.substring(1)})
            ztree.setId(${className}.get${TreeCode}());
            ztree.setpId(${className}.get${TreeParentCode}());
            ztree.setName(${className}.get${TreeName}());
            ztree.setTitle(${className}.get${TreeName}());
            ztrees.add(ztree);
        }
        return ztrees;
    }
#end

    /**
     * 根据实体获得 Wrapper
     *
     * @param ${className} ${functionName}
     * @return 查询条件
     */
    private QueryWrapper<${ClassName}> getWrapper(${ClassName} ${className}) {

        QueryWrapper<${ClassName}> wrapper = new QueryWrapper<>();

#foreach($column in $columns)
#set($queryType=$column.queryType)
#set($javaField=$column.javaField)
#set($javaType=$column.javaType)
#set($columnName=$column.columnName)
#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
#if($column.query)
    #if($column.queryType == "EQ")
        wrapper.eq(StrUtil.isNotBlank(${className}.get${AttrName}()), "${columnName}", ${className}.get${AttrName}());
    #elseif($queryType == "NE")
        wrapper.ne(StrUtil.isNotBlank(${className}.get${AttrName}()), "${columnName}", ${className}.get${AttrName}());
    #elseif($queryType == "GT")
        wrapper.gt(StrUtil.isNotBlank(${className}.get${AttrName}()), "${columnName}", ${className}.get${AttrName}());
    #elseif($queryType == "GTE")
        wrapper.ge(StrUtil.isNotBlank(${className}.get${AttrName}()), "${columnName}", ${className}.get${AttrName}());
    #elseif($queryType == "LT")
        wrapper.lt(StrUtil.isNotBlank(${className}.get${AttrName}()), "${columnName}", ${className}.get${AttrName}());
    #elseif($queryType == "LTE")
        wrapper.le(StrUtil.isNotBlank(${className}.get${AttrName}()), "${columnName}", ${className}.get${AttrName}());
    #elseif($queryType == "LIKE")
        wrapper.like(StrUtil.isNotBlank(${className}.get${AttrName}()), "${columnName}", SqlUtil.dealSpecialCharUseLike(${className}.get${AttrName}()));
    #elseif($queryType == "BETWEEN")

        String begin${AttrName} = (String) ${className}.getParams().get("begin${AttrName}");
        String end${AttrName} = (String) ${className}.getParams().get("end${AttrName}");
        wrapper.ge(StrUtil.isNotBlank(begin${AttrName}), "${columnName}", begin${AttrName});
        wrapper.le(StrUtil.isNotBlank(end${AttrName}), "${columnName}", end${AttrName});
    #end
#end
#end
        //数据过滤
        Object scope = ${className}.getParams().get("dataScope");
        if(ObjectUtil.isNotNull(scope)){
            wrapper.apply(scope.toString());
        }

        return wrapper;
    }
}
